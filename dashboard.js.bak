// Dashboard JavaScript - Analysis charts removed
import { extractFeatures } from './feature_extractor.js';
import { getModelPrediction } from './ml_model.js';
import { 
  checkGoogleSafeBrowsing, 
  checkVirusTotal, 
  checkPhishTank 
} from './api_integration.js';

// Document ready function
document.addEventListener('DOMContentLoaded', function() {
  console.log("DOM content loaded in dashboard.js");
  
  // Set up event listeners
  setupEventListeners();
  
  // Load recent detections data
  loadRecentDetections();
});

// Analysis charts functionality removed
              }
            },
            y: {
              grid: {
                color: 'rgba(255, 255, 255, 0.1)'
              },
              ticks: {
                color: '#b5b5c9'
              },
              beginAtZero: true
            }
          }
        }
      });
      console.log("Detection trends chart created");
    }
  } catch (error) {
    console.error('Error creating detection trends chart:', error);
  }

  // Feature Importance Chart
  try {
    const featureCtx = document.getElementById('featureImportanceChart');
    console.log("Feature chart element found:", !!featureCtx);
    
    if (!featureCtx) {
      console.error('Feature importance chart canvas not found');
    } else {
      // Create the feature importance chart
      console.log("Creating feature importance chart");
      new Chart(featureCtx, {
        type: 'bar',
        data: {
          labels: ['URL Length', 'Special Characters', 'Domain Age', 'SSL Certificate', 'Suspicious Keywords', 'Redirect Count', 'IP in URL', 'Subdomain Count'],
          datasets: [{
            label: 'Feature Importance',
            data: [0.85, 0.78, 0.72, 0.65, 0.58, 0.52, 0.48, 0.42],
            backgroundColor: [
              'rgba(63, 81, 181, 0.7)',
              'rgba(63, 81, 181, 0.65)',
              'rgba(63, 81, 181, 0.6)',
              'rgba(63, 81, 181, 0.55)',
              'rgba(63, 81, 181, 0.5)',
              'rgba(63, 81, 181, 0.45)',
              'rgba(63, 81, 181, 0.4)',
              'rgba(63, 81, 181, 0.35)'
            ],
            borderColor: 'rgba(63, 81, 181, 1)',
            borderWidth: 1
          }]
        },
        options: {
          indexAxis: 'y',
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              display: false
            },
            title: {
              display: true,
              text: 'ML Model Feature Importance',
              color: '#e6e6fa',
              font: {
                family: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
                size: 16
              }
            }
          },
          scales: {
            x: {
              grid: {
                color: 'rgba(255, 255, 255, 0.1)'
              },
              ticks: {
                color: '#b5b5c9'
              },
              max: 1.0,
              beginAtZero: true
            },
            y: {
              grid: {
                color: 'rgba(255, 255, 255, 0.1)'
              },
              ticks: {
                color: '#b5b5c9'
              }
            }
          }
        }
      });
      console.log("Feature importance chart created");
    }
  } catch (error) {
    console.error('Error creating feature importance chart:', error);
  }
  
  // Severity Distribution Chart
  try {
    const severityCtx = document.getElementById('severityDistributionChart');
    console.log("Severity chart element found:", !!severityCtx);
    
    if (!severityCtx) {
      console.error('Severity distribution chart canvas not found');
    } else {
      // Create the severity distribution chart
      console.log("Creating severity distribution chart");
      
      const severityData = analysisData.severityDistribution;
      
      new Chart(severityCtx, {
        type: 'doughnut',
        data: {
          labels: severityData.labels,
          datasets: [{
            data: severityData.data,
            backgroundColor: severityData.colors,
            borderColor: severityData.colors.map(color => color.replace('0.8', '1')),
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          cutout: '60%',
          plugins: {
            legend: {
              position: 'right',
              labels: {
                color: '#d1d1d1',
                font: {
                  family: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif"
                },
                padding: 15
              }
            },
            title: {
              display: true,
              text: 'Phishing Attempts by Severity',
              color: '#ffffff',
              font: {
                family: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
                size: 16,
                weight: 'bold'
              },
              padding: {
                top: 10,
                bottom: 15
              }
            },
            tooltip: {
              backgroundColor: 'rgba(15, 15, 30, 0.8)',
              titleColor: '#ffffff',
              bodyColor: '#f0f0ff',
              callbacks: {
                label: function(context) {
                  const value = context.raw;
                  const total = context.dataset.data.reduce((acc, val) => acc + val, 0);
                  const percentage = ((value / total) * 100).toFixed(1);
                  return `${context.label}: ${percentage}% (${value})`;
                }
              }
            }
          }
        }
      });
      console.log("Severity distribution chart created");
    }
  } catch (error) {
    console.error('Error creating severity distribution chart:', error);
  }

  // Category Breakdown Chart
  try {
    const categoryCtx = document.getElementById('categoryBreakdownChart');
    console.log("Category chart element found:", !!categoryCtx);
    
    if (!categoryCtx) {
      console.error('Category breakdown chart canvas not found');
    } else {
      // Create the category breakdown chart
      console.log("Creating category breakdown chart");
      
      const categoryData = analysisData.categoryBreakdown;
      
      new Chart(categoryCtx, {
        type: 'polarArea',
        data: {
          labels: categoryData.labels,
          datasets: [{
            data: categoryData.data,
            backgroundColor: categoryData.colors,
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              position: 'right',
              labels: {
                color: '#d1d1d1',
                font: {
                  family: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif"
                },
                padding: 15
              }
            },
            title: {
              display: true,
              text: 'Phishing Attempts by Category',
              color: '#ffffff',
              font: {
                family: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
                size: 16,
                weight: 'bold'
              },
              padding: {
                top: 10,
                bottom: 15
              }
            },
            tooltip: {
              backgroundColor: 'rgba(15, 15, 30, 0.8)',
              titleColor: '#ffffff',
              bodyColor: '#f0f0ff'
            }
          },
          scales: {
            r: {
              ticks: {
                backdropColor: 'transparent',
                color: '#d1d1d1'
              },
              grid: {
                color: 'rgba(255, 255, 255, 0.1)'
              },
              angleLines: {
                color: 'rgba(255, 255, 255, 0.1)'
              }
            }
          }
        }
      });
      console.log("Category breakdown chart created");
    }
  } catch (error) {
    console.error('Error creating category breakdown chart:', error);
  }
}

function setupEventListeners() {
  // Time Range Selector
  const timeRangeSelect = document.getElementById('timeRange');
  if (timeRangeSelect) {
    timeRangeSelect.addEventListener('change', function() {
      updateDashboardData(this.value);
    });
  }

  // Export Button
  const exportBtn = document.getElementById('exportBtn');
  if (exportBtn) {
    exportBtn.addEventListener('click', exportDetectionData);
  }

  // Update Model Button
  const updateModelBtn = document.getElementById('updateModelBtn');
  if (updateModelBtn) {
    updateModelBtn.addEventListener('click', updateMLModel);
  }

  // Detail buttons on the table
  const detailButtons = document.querySelectorAll('.data-table .action-button');
  detailButtons.forEach(button => {
    button.addEventListener('click', function() {
      const row = this.closest('tr');
      const url = row.querySelector('td:nth-child(2)').textContent;
      showDetectionDetails(url);
    });
  });
  
  // API Configuration buttons
  const configButtons = document.querySelectorAll('.api-card .action-button');
  configButtons.forEach(button => {
    button.addEventListener('click', function() {
      const apiCard = this.closest('.api-card');
      const apiName = apiCard.querySelector('h4').textContent;
      showApiConfigModal(apiName);
    });
  });
}

function loadRecentDetections() {
  // In a real implementation, this would load data from storage
  // For now, the table is already populated in the HTML
  console.log('Loading recent detections...');
}

function updateDashboardData(timeRange) {
  // Show loading notification
  showNotification('Updating dashboard data...', 'info');
  
  // In a real implementation, this would fetch new data based on the time range
  setTimeout(() => {
    // Analysis charts have been removed
    showNotification('Dashboard updated successfully!', 'success');
  }, 1000);
}
}

function exportDetectionData() {
  showNotification('Preparing export...', 'info');
  
  // Create data to export
  const table = document.getElementById('recentDetectionsTable');
  let csv = 'Time,URL,Detection Score,Status\n';
  
  for (let i = 1; i < table.rows.length; i++) {
    const row = table.rows[i];
    const time = row.cells[0].innerText;
    const url = row.cells[1].innerText;
    const score = row.cells[2].innerText;
    const status = row.cells[3].innerText;
    
    csv += `"${time}","${url}","${score}","${status}"\n`;
  }
  
  // Create and download the file
  const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
  const link = document.createElement('a');
  const url = URL.createObjectURL(blob);
  
  link.setAttribute('href', url);
  link.setAttribute('download', 'phishing_detections.csv');
  link.style.visibility = 'hidden';
  
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  
  showNotification('Export completed successfully!', 'success');
}

function updateMLModel() {
  const button = document.getElementById('updateModelBtn');
  button.disabled = true;
  button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Updating...';
  
  showNotification('Downloading latest ML model...', 'info');
  
  // Simulate model update process
  setTimeout(() => {
    showNotification('Validating model integrity...', 'info');
    
    setTimeout(() => {
      showNotification('Installing new model...', 'info');
      
      setTimeout(() => {
        button.disabled = false;
        button.innerHTML = '<i class="fas fa-sync"></i> Update Model';
        showNotification('ML model updated successfully to PhishGuard v2.4!', 'success');
        
        // Update the model version in the UI
        const modelVersionElement = document.querySelector('.model-details p:first-child');
        if (modelVersionElement) {
          modelVersionElement.innerHTML = '<strong>Current Model:</strong> PhishGuard v2.4';
        }
        
        const lastUpdatedElement = document.querySelector('.model-details p:nth-child(2)');
        if (lastUpdatedElement) {
          lastUpdatedElement.innerHTML = '<strong>Last Updated:</strong> Just now';
        }
      }, 1500);
    }, 1500);
  }, 2000);
}

function showDetectionDetails(url) {
  // Create and show a modal with detection details
  showNotification(`Loading details for ${url}...`, 'info');
  
  // Create modal container
  const modalContainer = document.createElement('div');
  modalContainer.className = 'modal-container';
  
  // Create modal content
  const modalContent = document.createElement('div');
  modalContent.className = 'modal-content';
  
  // Add header with close button
  const modalHeader = document.createElement('div');
  modalHeader.className = 'modal-header';
  
  const modalTitle = document.createElement('h2');
  modalTitle.textContent = 'Detection Details';
  
  const closeButton = document.createElement('button');
  closeButton.innerHTML = '&times;';
  closeButton.className = 'modal-close';
  closeButton.onclick = () => document.body.removeChild(modalContainer);
  
  modalHeader.appendChild(modalTitle);
  modalHeader.appendChild(closeButton);
  
  // Add content
  const modalBody = document.createElement('div');
  modalBody.className = 'modal-body';
  
  // Create a loading indicator
  const loadingIndicator = document.createElement('div');
  loadingIndicator.className = 'loading-spinner';
  loadingIndicator.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Loading details...';
  
  modalBody.appendChild(loadingIndicator);
  
  // Assemble modal
  modalContent.appendChild(modalHeader);
  modalContent.appendChild(modalBody);
  modalContainer.appendChild(modalContent);
  
  // Add to body
  document.body.appendChild(modalContainer);
  
  // Simulate API call to get details
  setTimeout(() => {
    // Get detection details (simulated data)
    const detectionData = getDetectionDetails(url);
    
    // Clear loading indicator
    modalBody.innerHTML = '';
    
    // Add detection score
    const scoreContainer = document.createElement('div');
    scoreContainer.className = 'detail-score';
    
    const scoreLabel = document.createElement('h3');
    scoreLabel.textContent = 'Safety Score';
    
    const scoreValue = document.createElement('div');
    scoreValue.className = 'score-value';
    
    let scoreClass = '';
    if (detectionData.score < 0.3) {
      scoreClass = 'safe';
    } else if (detectionData.score < 0.7) {
      scoreClass = 'warning';
    } else {
      scoreClass = 'danger';
    }
    
    scoreValue.className += ' ' + scoreClass;
    scoreValue.textContent = `${Math.round(detectionData.score * 100)}/100`;
    
    scoreContainer.appendChild(scoreLabel);
    scoreContainer.appendChild(scoreValue);
    modalBody.appendChild(scoreContainer);
    
    // Add detection details list
    const detailsList = document.createElement('ul');
    detailsList.className = 'detection-details-list';
    
    detectionData.details.forEach(detail => {
      const item = document.createElement('li');
      item.className = detail.type;
      item.innerHTML = `<i class="fas ${detail.icon}"></i> ${detail.text}`;
      detailsList.appendChild(item);
    });
    
    modalBody.appendChild(detailsList);
    
    // Add actions section
    const actionsSection = document.createElement('div');
    actionsSection.className = 'detail-actions';
    
    const reportButton = document.createElement('button');
    reportButton.className = 'action-button';
    reportButton.innerHTML = '<i class="fas fa-flag"></i> Report False Detection';
    reportButton.onclick = () => {
      showNotification('Thank you for your feedback!', 'success');
      closeButton.click();
    };
    
    const blockButton = document.createElement('button');
    blockButton.className = 'action-button danger';
    blockButton.innerHTML = '<i class="fas fa-ban"></i> Block Domain';
    blockButton.onclick = () => {
      showNotification('Domain has been blocked', 'success');
      closeButton.click();
    };
    
    actionsSection.appendChild(reportButton);
    actionsSection.appendChild(blockButton);
    
    modalBody.appendChild(actionsSection);
    
  }, 1000);
}

// Helper function to get detection details (simulated)
function getDetectionDetails(url) {
  // In a real implementation, this would fetch data from storage or API
  
  const score = url.includes('google.com') ? 0.02 : 
               url.includes('amazon') ? 0.87 : 
               url.includes('paypal') ? 0.91 : 
               url.includes('chase') ? 0.89 : 0.96;
  
  const isPhishing = score > 0.7;
  const isSuspicious = score > 0.3 && score <= 0.7;
  const isSafe = score <= 0.3;
  
  const details = [];
  
  if (url.length > 30) {
    details.push({
      type: 'danger',
      icon: 'fa-exclamation-triangle',
      text: 'Excessively long URL'
    });
  }
  
  if (!url.includes('https')) {
    details.push({
      type: 'danger',
      icon: 'fa-unlock',
      text: 'Site does not use secure HTTPS connection'
    });
  }
  
  if (url.includes('google.com')) {
    details.push({
      type: 'safe',
      icon: 'fa-check-circle',
      text: 'Domain appears to be well-established'
    });
  } else if (!url.includes('.com')) {
    details.push({
      type: 'warning',
      icon: 'fa-exclamation-circle',
      text: 'Unusual top-level domain (TLD)'
    });
  }
  
  if (isPhishing) {
    details.push({
      type: 'danger',
      icon: 'fa-user-secret',
      text: 'Page contains suspicious content asking for sensitive information'
    });
    
    details.push({
      type: 'danger',
      icon: 'fa-clone',
      text: 'Site appears to be impersonating a legitimate brand'
    });
  }
  
  if (url.includes('bank') || url.includes('secure') || url.includes('login') || url.includes('account')) {
    details.push({
      type: 'warning',
      icon: 'fa-key',
      text: 'Contains keywords commonly used in phishing attempts'
    });
  }
  
  return {
    url,
    score,
    timestamp: new Date().toISOString(),
    classification: isPhishing ? 'phishing' : (isSuspicious ? 'suspicious' : 'safe'),
    details
  };
}

function showNotification(message, type = 'info') {
  const container = document.getElementById('notificationContainer');
  
  const notification = document.createElement('div');
  notification.className = 'notification';
  
  let icon = '';
  switch (type) {
    case 'success':
      icon = '<i class="fas fa-check-circle"></i>';
      break;
    case 'error':
      icon = '<i class="fas fa-exclamation-circle"></i>';
      break;
    default:
      icon = '<i class="fas fa-info-circle"></i>';
  }
  
  notification.innerHTML = `${icon} ${message}`;
  
  container.appendChild(notification);
  
  // Remove notification after 3 seconds
  setTimeout(() => {
    notification.style.opacity = '0';
    notification.style.transform = 'translateX(100%)';
    
    setTimeout(() => {
      container.removeChild(notification);
    }, 300);
  }, 3000);
}

// Function to handle API configuration
function showApiConfigModal(apiName) {
  // Create a modal for API configuration
  const modalContainer = document.createElement('div');
  modalContainer.className = 'modal-container';
  
  const modalContent = document.createElement('div');
  modalContent.className = 'modal-content';
  
  // Add header
  const modalHeader = document.createElement('div');
  modalHeader.className = 'modal-header';
  
  const modalTitle = document.createElement('h2');
  modalTitle.textContent = `Configure ${apiName}`;
  
  const closeButton = document.createElement('button');
  closeButton.innerHTML = '&times;';
  closeButton.className = 'modal-close';
  closeButton.onclick = () => document.body.removeChild(modalContainer);
  
  modalHeader.appendChild(modalTitle);
  modalHeader.appendChild(closeButton);
  
  // Add content
  const modalBody = document.createElement('div');
  modalBody.className = 'modal-body';
  
  // Different content based on API
  if (apiName === 'Google Safe Browsing') {
    modalBody.innerHTML = `
      <p>Connect to Google Safe Browsing API to check URLs against Google's database of unsafe web resources.</p>
      <div class="form-group">
        <label for="apiKey">API Key:</label>
        <input type="text" id="apiKey" placeholder="Enter your Google API Key" value="AIza...">
      </div>
      <div class="form-group">
        <label>Status:</label>
        <div class="status-badge connected">Connected</div>
      </div>
      <div class="form-group">
        <label for="threatTypes">Threat Types to Check:</label>
        <div class="checkbox-group">
          <label><input type="checkbox" checked> Malware</label>
          <label><input type="checkbox" checked> Social Engineering</label>
          <label><input type="checkbox" checked> Unwanted Software</label>
          <label><input type="checkbox" checked> Potentially Harmful Applications</label>
        </div>
      </div>
    `;
  } else if (apiName === 'VirusTotal') {
    modalBody.innerHTML = `
      <p>Use VirusTotal's API to check URLs against multiple security engines.</p>
      <div class="form-group">
        <label for="apiKey">API Key:</label>
        <input type="text" id="apiKey" placeholder="Enter your VirusTotal API Key" value="vt...">
      </div>
      <div class="form-group">
        <label>Status:</label>
        <div class="status-badge connected">Connected</div>
      </div>
      <div class="form-group">
        <label for="scanThreshold">Detection Threshold:</label>
        <select id="scanThreshold">
          <option>Any detection (1+)</option>
          <option selected>Multiple detections (3+)</option>
          <option>Many detections (5+)</option>
        </select>
      </div>
    `;
  } else if (apiName === 'PhishTank') {
    modalBody.innerHTML = `
      <p>Connect to PhishTank to access community-verified phishing URLs.</p>
      <div class="form-group">
        <label for="apiKey">API Key:</label>
        <input type="text" id="apiKey" placeholder="Enter your PhishTank API Key" value="pt...">
      </div>
      <div class="form-group">
        <label>Status:</label>
        <div class="status-badge connected">Connected</div>
      </div>
      <div class="form-group">
        <label for="updateInterval">Update Interval:</label>
        <select id="updateInterval">
          <option>Hourly</option>
          <option selected>Daily</option>
          <option>Weekly</option>
        </select>
      </div>
    `;
  } else {
    modalBody.innerHTML = `
      <p>Connect your custom phishing detection API or database.</p>
      <div class="form-group">
        <label for="apiEndpoint">API Endpoint:</label>
        <input type="text" id="apiEndpoint" placeholder="https://your-api-endpoint.com/check">
      </div>
      <div class="form-group">
        <label for="apiKey">API Key:</label>
        <input type="text" id="apiKey" placeholder="Enter your API Key">
      </div>
      <div class="form-group">
        <label>Request Method:</label>
        <div class="radio-group">
          <label><input type="radio" name="method" checked> GET</label>
          <label><input type="radio" name="method"> POST</label>
        </div>
      </div>
    `;
  }
  
  // Add save button
  const actionButtons = document.createElement('div');
  actionButtons.className = 'detail-actions';
  
  const saveButton = document.createElement('button');
  saveButton.className = 'primary-button';
  saveButton.innerHTML = '<i class="fas fa-save"></i> Save Configuration';
  saveButton.onclick = () => {
    showNotification(`${apiName} configuration saved successfully!`, 'success');
    closeButton.click();
  };
  
  actionButtons.appendChild(saveButton);
  modalBody.appendChild(actionButtons);
  
  // Add all to DOM
  modalContent.appendChild(modalHeader);
  modalContent.appendChild(modalBody);
  modalContainer.appendChild(modalContent);
  document.body.appendChild(modalContainer);
  
  // Add the CSS for form elements
  const style = document.createElement('style');
  style.textContent = `
    .form-group {
      margin-bottom: 16px;
    }
    
    .form-group label {
      display: block;
      margin-bottom: 8px;
      font-weight: 500;
      color: var(--text-color);
    }
    
    .form-group input[type="text"],
    .form-group select {
      width: 100%;
      padding: 10px;
      border-radius: 6px;
      border: 1px solid var(--border-color);
      background-color: var(--chart-bg);
      color: var(--text-color);
    }
    
    .checkbox-group, .radio-group {
      display: flex;
      flex-wrap: wrap;
      gap: 12px;
    }
    
    .checkbox-group label, .radio-group label {
      margin-right: 16px;
      display: flex;
      align-items: center;
      font-weight: normal;
    }
    
    .checkbox-group input, .radio-group input {
      margin-right: 8px;
    }
    
    .status-badge {
      display: inline-block;
      padding: 6px 12px;
      border-radius: 20px;
      font-size: 14px;
    }
    
    .status-badge.connected {
      background-color: var(--tag-safe-bg);
      color: var(--tag-safe-text);
    }
  `;
  document.head.appendChild(style);
}

// Export functions for testing and module use
export {
  initializeCharts,
  updateDashboardData,
  exportDetectionData,
  updateMLModel,
  showDetectionDetails,
  showNotification,
  showApiConfigModal
};
