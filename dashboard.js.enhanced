// Dashboard JavaScript with enhanced functionality for button event handlers
document.addEventListener('DOMContentLoaded', function() {
    // Theme toggle functionality
    const themeToggle = document.querySelector('.theme-toggle');
    if (themeToggle) {
        themeToggle.addEventListener('click', function() {
            document.body.classList.toggle('light-mode');
            const icon = themeToggle.querySelector('i');
            if (document.body.classList.contains('light-mode')) {
                icon.className = 'fas fa-moon';
                localStorage.setItem('theme', 'light');
            } else {
                icon.className = 'fas fa-sun';
                localStorage.setItem('theme', 'dark');
            }
        });

        // Apply saved theme on load
        const savedTheme = localStorage.getItem('theme');
        if (savedTheme === 'light') {
            document.body.classList.add('light-mode');
            themeToggle.querySelector('i').className = 'fas fa-moon';
        }
    }

    // Notification system
    window.showNotification = function(message, type = 'info') {
        // Remove existing notification if it exists
        const existingNotification = document.getElementById('notification');
        if (existingNotification) {
            existingNotification.remove();
        }

        // Create new notification
        const notification = document.createElement('div');
        notification.id = 'notification';
        notification.className = type; // 'success', 'error', 'warning', or 'info'

        // Set icon based on type
        let iconClass;
        switch(type) {
            case 'success':
                iconClass = 'fas fa-check-circle';
                break;
            case 'error':
                iconClass = 'fas fa-exclamation-circle';
                break;
            case 'warning':
                iconClass = 'fas fa-exclamation-triangle';
                break;
            default:
                iconClass = 'fas fa-info-circle';
        }

        notification.innerHTML = `
            <span class="notification-icon"><i class="${iconClass}"></i></span>
            <span class="notification-message">${message}</span>
            <span class="notification-close"><i class="fas fa-times"></i></span>
        `;

        document.body.appendChild(notification);

        // Add event listener to close button
        notification.querySelector('.notification-close').addEventListener('click', function() {
            notification.classList.add('notification-hide');
            setTimeout(() => notification.remove(), 300);
        });

        // Auto close after 5 seconds
        setTimeout(() => {
            if (document.body.contains(notification)) {
                notification.classList.add('notification-hide');
                setTimeout(() => notification.remove(), 300);
            }
        }, 5000);
    };

    // Loading indicator
    window.showLoadingIndicator = function(show = true) {
        let loader = document.getElementById('loader');
        
        if (!loader && show) {
            loader = document.createElement('div');
            loader.id = 'loader';
            loader.innerHTML = '<div class="spinner"></div>';
            document.body.appendChild(loader);
            
            // Force reflow to ensure CSS animation plays
            loader.offsetHeight;
            loader.style.opacity = '1';
        } else if (loader && !show) {
            loader.style.opacity = '0';
            setTimeout(() => {
                if (loader && loader.parentNode) {
                    loader.parentNode.removeChild(loader);
                }
            }, 300);
        }
    };

    // Modal functionality
    window.showModal = function(title, content) {
        let modalContainer = document.getElementById('modal-container');
        
        if (!modalContainer) {
            modalContainer = document.createElement('div');
            modalContainer.id = 'modal-container';
            document.body.appendChild(modalContainer);
        }
        
        modalContainer.innerHTML = `
            <div class="modal-overlay"></div>
            <div class="modal">
                <div class="modal-header">
                    <h3>${title}</h3>
                    <button class="modal-close"><i class="fas fa-times"></i></button>
                </div>
                <div class="modal-content">
                    ${content}
                </div>
            </div>
        `;
        
        modalContainer.style.display = 'block';
        
        // Add close event listener
        const closeBtn = modalContainer.querySelector('.modal-close');
        const overlay = modalContainer.querySelector('.modal-overlay');
        
        closeBtn.addEventListener('click', hideModal);
        overlay.addEventListener('click', hideModal);
    };
    
    window.hideModal = function() {
        const modalContainer = document.getElementById('modal-container');
        if (modalContainer) {
            modalContainer.style.display = 'none';
        }
    };

    // Button event handlers
    const setupButtonHandlers = () => {
        // Export data button
        const exportDataBtn = document.getElementById('export-data-btn');
        if (exportDataBtn) {
            exportDataBtn.addEventListener('click', handleExportData);
        }

        // View details button
        const viewDetailsButtons = document.querySelectorAll('.view-details-btn');
        viewDetailsButtons.forEach(button => {
            button.addEventListener('click', handleDetailsView);
        });

        // Configure API button
        const configureApiBtn = document.getElementById('configure-api-btn');
        if (configureApiBtn) {
            configureApiBtn.addEventListener('click', handleConfigureAPI);
        }

        // Connect API button
        const connectApiBtn = document.getElementById('connect-api-btn');
        if (connectApiBtn) {
            connectApiBtn.addEventListener('click', handleConnectAPI);
        }

        // Update Model button
        const updateModelBtn = document.getElementById('update-model-btn');
        if (updateModelBtn) {
            updateModelBtn.addEventListener('click', handleModelUpdate);
        }

        // URL check form
        const urlCheckForm = document.getElementById('url-check-form');
        if (urlCheckForm) {
            urlCheckForm.addEventListener('submit', function(e) {
                e.preventDefault();
                handleUrlCheck(this);
            });
        }
    };

    // Handle Export Data
    function handleExportData() {
        showLoadingIndicator(true);
        
        // Simulate API call
        setTimeout(() => {
            showLoadingIndicator(false);
            
            // Create a CSV string with mock data
            const mockData = [
                ['URL', 'Risk Score', 'Detection Date', 'Status'],
                ['https://suspicious-site.com/login', '85', '2023-06-15', 'High Risk'],
                ['https://fake-bank.com/verify', '92', '2023-06-14', 'High Risk'],
                ['https://legitimate-site.com', '12', '2023-06-12', 'Safe']
            ];
            
            const csvContent = mockData.map(row => row.join(',')).join('\n');
            const blob = new Blob([csvContent], { type: 'text/csv' });
            const url = URL.createObjectURL(blob);
            const link = document.createElement('a');
            
            link.href = url;
            link.download = 'phishing_detection_data.csv';
            link.style.display = 'none';
            
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            
            showNotification('Data exported successfully!', 'success');
        }, 1200);
    }

    // Handle Details View
    function handleDetailsView(e) {
        const detectionId = e.currentTarget.getAttribute('data-id') || '12345';
        showLoadingIndicator(true);
        
        // Simulate API call
        setTimeout(() => {
            showLoadingIndicator(false);
            
            const detailsContent = `
                <div class="details-grid">
                    <div class="detail-item">
                        <span class="detail-label">URL</span>
                        <span class="detail-value">https://suspicious-site.com/login</span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">Detection Date</span>
                        <span class="detail-value">June 15, 2023 14:35</span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">Risk Score</span>
                        <span class="detail-value">85/100 (High Risk)</span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">Detection Model</span>
                        <span class="detail-value">PhishGuard v2.3</span>
                    </div>
                </div>
                <div class="detail-item" style="margin-top: 20px;">
                    <span class="detail-label">Risk Indicators</span>
                    <ul class="detail-list">
                        <li>Domain age less than 30 days</li>
                        <li>SSL certificate issues detected</li>
                        <li>Similar to known brand (95% match)</li>
                        <li>Suspicious form input fields</li>
                        <li>Redirects detected in page</li>
                    </ul>
                </div>
                <div class="detail-item" style="margin-top: 20px;">
                    <span class="detail-label">Screenshot</span>
                    <div style="margin-top: 10px; border: 1px solid var(--border-color); padding: 5px; border-radius: 8px; text-align: center;">
                        <i class="fas fa-image" style="font-size: 80px; color: var(--text-secondary);"></i>
                        <p style="margin-top: 10px;">Screenshot preview not available</p>
                    </div>
                </div>
            `;
            
            showModal('Detection Details', detailsContent);
        }, 800);
    }

    // Handle Configure API
    function handleConfigureAPI() {
        const configureContent = `
            <form id="api-config-form">
                <div class="form-group">
                    <label for="api-key">API Key</label>
                    <input type="text" id="api-key" placeholder="Enter your API key">
                </div>
                <div class="form-group">
                    <label for="api-endpoint">API Endpoint</label>
                    <input type="text" id="api-endpoint" value="https://api.phishguard.example.com/v1/">
                </div>
                <div class="form-group">
                    <label for="api-version">API Version</label>
                    <select id="api-version">
                        <option value="v1">Version 1 (Legacy)</option>
                        <option value="v2" selected>Version 2 (Current)</option>
                        <option value="v3-beta">Version 3 (Beta)</option>
                    </select>
                </div>
                <button type="submit" class="primary-button" style="width: 100%;">
                    <i class="fas fa-save"></i> Save Configuration
                </button>
            </form>
        `;
        
        showModal('Configure API', configureContent);
        
        // Add submit handler to the form
        setTimeout(() => {
            const form = document.getElementById('api-config-form');
            if (form) {
                form.addEventListener('submit', function(e) {
                    e.preventDefault();
                    hideModal();
                    showNotification('API configuration saved successfully', 'success');
                });
            }
        }, 100);
    }

    // Handle Connect API
    function handleConnectAPI() {
        showLoadingIndicator(true);
        
        // Simulate API connection attempt
        setTimeout(() => {
            showLoadingIndicator(false);
            const success = Math.random() > 0.3; // 70% chance of success
            
            if (success) {
                showNotification('Successfully connected to the API', 'success');
            } else {
                showNotification('Failed to connect to API. Check your credentials and try again.', 'error');
            }
        }, 1500);
    }

    // Handle Model Update
    function handleModelUpdate() {
        showLoadingIndicator(true);
        
        // Simulate model update process
        setTimeout(() => {
            showLoadingIndicator(false);
            
            const updateContent = `
                <div style="text-align: center; margin-bottom: 20px;">
                    <i class="fas fa-check-circle" style="font-size: 48px; color: var(--safe-color);"></i>
                    <h3 style="margin-top: 15px;">Model Updated Successfully</h3>
                    <p style="margin-top: 10px; color: var(--text-secondary);">
                        The phishing detection model has been updated to the latest version.
                    </p>
                </div>
                <div class="detail-item">
                    <span class="detail-label">New Model Version</span>
                    <span class="detail-value">PhishGuard v2.4</span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">Improvements</span>
                    <ul class="detail-list">
                        <li>Enhanced detection for OAuth phishing attempts</li>
                        <li>Improved brand impersonation detection</li>
                        <li>Better handling of redirect chains</li>
                        <li>Reduced false positives for legitimate banking sites</li>
                    </ul>
                </div>
                <button id="close-update-modal" class="primary-button" style="width: 100%; margin-top: 20px;">
                    <i class="fas fa-check"></i> Close
                </button>
            `;
            
            showModal('Model Update', updateContent);
            
            // Add click handler to close button
            setTimeout(() => {
                const closeBtn = document.getElementById('close-update-modal');
                if (closeBtn) {
                    closeBtn.addEventListener('click', hideModal);
                }
            }, 100);
        }, 2000);
    }

    // Handle URL Check
    function handleUrlCheck(form) {
        const urlInput = form.querySelector('input[type="url"]');
        const url = urlInput.value.trim();
        
        if (!url) {
            showNotification('Please enter a valid URL', 'warning');
            return;
        }
        
        showLoadingIndicator(true);
        
        // Simulate URL check
        setTimeout(() => {
            showLoadingIndicator(false);
            
            // Determine a "risk score" based on some arbitrary criteria
            let riskScore;
            if (url.includes('secure') || url.includes('bank') || url.includes('login')) {
                riskScore = Math.floor(Math.random() * 40) + 60; // Higher risk (60-99)
            } else {
                riskScore = Math.floor(Math.random() * 50); // Lower risk (0-49)
            }
            
            let riskLevel, riskClass;
            if (riskScore < 30) {
                riskLevel = 'Low Risk';
                riskClass = 'success';
            } else if (riskScore < 70) {
                riskLevel = 'Medium Risk';
                riskClass = 'warning';
            } else {
                riskLevel = 'High Risk';
                riskClass = 'error';
            }
            
            const checkResultContent = `
                <div style="text-align: center; margin-bottom: 25px;">
                    <div class="status-${riskClass === 'success' ? 'safe' : riskClass === 'warning' ? 'warning' : 'danger'}" 
                         style="font-size: 16px; padding: 8px 18px; display: inline-block;">
                        ${riskLevel}
                    </div>
                </div>
                
                <div class="details-grid">
                    <div class="detail-item">
                        <span class="detail-label">URL</span>
                        <span class="detail-value">${url}</span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">Risk Score</span>
                        <span class="detail-value">${riskScore}/100</span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">Check Date</span>
                        <span class="detail-value">${new Date().toLocaleString()}</span>
                    </div>
                </div>
                
                ${riskScore >= 50 ? `
                <div class="detail-item" style="margin-top: 20px;">
                    <span class="detail-label">Risk Indicators</span>
                    <ul class="detail-list">
                        ${riskScore >= 80 ? '<li>Domain registered recently</li>' : ''}
                        ${riskScore >= 60 ? '<li>Similar to known phishing patterns</li>' : ''}
                        ${riskScore >= 50 ? '<li>Suspicious URL structure</li>' : ''}
                        ${url.includes('bank') ? '<li>Financial institution impersonation risk</li>' : ''}
                        ${url.includes('login') ? '<li>Credential harvesting risk</li>' : ''}
                    </ul>
                </div>
                ` : ''}
                
                <div style="margin-top: 25px; display: flex; gap: 10px;">
                    <button id="close-check-modal" class="action-button" style="flex: 1;">
                        <i class="fas fa-times"></i> Close
                    </button>
                    <button id="report-url-btn" class="primary-button" style="flex: 1;">
                        <i class="fas fa-flag"></i> Report URL
                    </button>
                </div>
            `;
            
            showModal('URL Check Results', checkResultContent);
            
            // Add click handlers to buttons
            setTimeout(() => {
                const closeBtn = document.getElementById('close-check-modal');
                const reportBtn = document.getElementById('report-url-btn');
                
                if (closeBtn) {
                    closeBtn.addEventListener('click', hideModal);
                }
                
                if (reportBtn) {
                    reportBtn.addEventListener('click', function() {
                        hideModal();
                        showNotification('URL reported successfully. Thank you for your contribution!', 'success');
                    });
                }
            }, 100);
        }, 1500);
    }

    // Initialize button handlers
    setupButtonHandlers();

    // Initialize distribution bars with animation
    const initScoreBars = () => {
        const safeBar = document.querySelector('.score-bar.safe');
        const warningBar = document.querySelector('.score-bar.warning');
        const dangerBar = document.querySelector('.score-bar.danger');
        
        if (safeBar) safeBar.style.width = '65%';
        if (warningBar) warningBar.style.width = '25%';
        if (dangerBar) dangerBar.style.width = '10%';
    };
    
    // Call the init function after a small delay to ensure the DOM is fully loaded
    setTimeout(initScoreBars, 100);
});
