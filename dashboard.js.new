// Dashboard JavaScript with proper chart initialization
import { extractFeatures } from './feature_extractor.js';
import { getModelPrediction } from './ml_model.js';
import { 
  checkGoogleSafeBrowsing, 
  checkVirusTotal, 
  checkPhishTank 
} from './api_integration.js';

document.addEventListener('DOMContentLoaded', function() {
  // Initialize charts
  initializeCharts();
  
  // Set up event listeners
  setupEventListeners();
  
  // Load recent detections data
  loadRecentDetections();
});

function initializeCharts() {
  // Detection Trends Chart
  const trendsCtx = document.getElementById('detectionTrendsChart').getContext('2d');
  const detectionTrendsChart = new Chart(trendsCtx, {
    type: 'line',
    data: {
      labels: ['7 Days Ago', '6 Days Ago', '5 Days Ago', '4 Days Ago', '3 Days Ago', '2 Days Ago', 'Yesterday', 'Today'],
      datasets: [
        {
          label: 'Safe Sites',
          data: [25, 20, 22, 18, 29, 31, 24, 27],
          borderColor: '#4caf50',
          backgroundColor: 'rgba(76, 175, 80, 0.1)',
          tension: 0.4
        },
        {
          label: 'Suspicious Sites',
          data: [5, 3, 6, 4, 7, 2, 3, 2],
          borderColor: '#ffca28',
          backgroundColor: 'rgba(255, 202, 40, 0.1)',
          tension: 0.4
        },
        {
          label: 'Phishing Sites',
          data: [2, 1, 3, 0, 4, 2, 1, 1],
          borderColor: '#f44336',
          backgroundColor: 'rgba(244, 67, 54, 0.1)',
          tension: 0.4
        }
      ]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: {
          position: 'top',
          labels: {
            color: '#e6e6fa',
            font: {
              family: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif"
            }
          }
        },
        title: {
          display: true,
          text: 'Detection Trends Over Time',
          color: '#e6e6fa',
          font: {
            family: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
            size: 16
          }
        }
      },
      scales: {
        x: {
          grid: {
            color: 'rgba(255, 255, 255, 0.1)'
          },
          ticks: {
            color: '#b5b5c9'
          }
        },
        y: {
          grid: {
            color: 'rgba(255, 255, 255, 0.1)'
          },
          ticks: {
            color: '#b5b5c9'
          },
          beginAtZero: true
        }
      }
    }
  });

  // Feature Importance Chart
  const featureCtx = document.getElementById('featureImportanceChart').getContext('2d');
  const featureImportanceChart = new Chart(featureCtx, {
    type: 'bar',
    data: {
      labels: ['URL Length', 'Special Characters', 'Domain Age', 'SSL Certificate', 'Suspicious Keywords', 'Redirect Count', 'IP in URL', 'Subdomain Count'],
      datasets: [{
        label: 'Feature Importance',
        data: [0.85, 0.78, 0.72, 0.65, 0.58, 0.52, 0.48, 0.42],
        backgroundColor: [
          'rgba(63, 81, 181, 0.7)',
          'rgba(63, 81, 181, 0.65)',
          'rgba(63, 81, 181, 0.6)',
          'rgba(63, 81, 181, 0.55)',
          'rgba(63, 81, 181, 0.5)',
          'rgba(63, 81, 181, 0.45)',
          'rgba(63, 81, 181, 0.4)',
          'rgba(63, 81, 181, 0.35)'
        ],
        borderColor: 'rgba(63, 81, 181, 1)',
        borderWidth: 1
      }]
    },
    options: {
      indexAxis: 'y',
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: {
          display: false
        },
        title: {
          display: true,
          text: 'ML Model Feature Importance',
          color: '#e6e6fa',
          font: {
            family: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
            size: 16
          }
        }
      },
      scales: {
        x: {
          grid: {
            color: 'rgba(255, 255, 255, 0.1)'
          },
          ticks: {
            color: '#b5b5c9'
          },
          max: 1.0,
          beginAtZero: true
        },
        y: {
          grid: {
            color: 'rgba(255, 255, 255, 0.1)'
          },
          ticks: {
            color: '#b5b5c9'
          }
        }
      }
    }
  });
}

function setupEventListeners() {
  // Time Range Selector
  const timeRangeSelect = document.getElementById('timeRange');
  if (timeRangeSelect) {
    timeRangeSelect.addEventListener('change', function() {
      updateDashboardData(this.value);
    });
  }

  // Export Button
  const exportBtn = document.getElementById('exportBtn');
  if (exportBtn) {
    exportBtn.addEventListener('click', exportDetectionData);
  }

  // Update Model Button
  const updateModelBtn = document.getElementById('updateModelBtn');
  if (updateModelBtn) {
    updateModelBtn.addEventListener('click', updateMLModel);
  }

  // Detail buttons on the table
  const detailButtons = document.querySelectorAll('.data-table .action-button');
  detailButtons.forEach(button => {
    button.addEventListener('click', function() {
      const row = this.closest('tr');
      const url = row.querySelector('td:nth-child(2)').textContent;
      showDetectionDetails(url);
    });
  });
}

function loadRecentDetections() {
  // In a real implementation, this would load data from storage
  // For now, the table is already populated in the HTML
  console.log('Loading recent detections...');
}

function updateDashboardData(timeRange) {
  // Show loading notification
  showNotification('Updating dashboard data...', 'info');
  
  // In a real implementation, this would fetch new data based on the time range
  setTimeout(() => {
    showNotification('Dashboard updated successfully!', 'success');
  }, 1000);
}

function exportDetectionData() {
  showNotification('Preparing export...', 'info');
  
  // Create data to export
  const table = document.getElementById('recentDetectionsTable');
  let csv = 'Time,URL,Detection Score,Status\n';
  
  for (let i = 1; i < table.rows.length; i++) {
    const row = table.rows[i];
    const time = row.cells[0].innerText;
    const url = row.cells[1].innerText;
    const score = row.cells[2].innerText;
    const status = row.cells[3].innerText;
    
    csv += `"${time}","${url}","${score}","${status}"\n`;
  }
  
  // Create and download the file
  const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
  const link = document.createElement('a');
  const url = URL.createObjectURL(blob);
  
  link.setAttribute('href', url);
  link.setAttribute('download', 'phishing_detections.csv');
  link.style.visibility = 'hidden';
  
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  
  showNotification('Export completed successfully!', 'success');
}

function updateMLModel() {
  const button = document.getElementById('updateModelBtn');
  button.disabled = true;
  button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Updating...';
  
  showNotification('Downloading latest ML model...', 'info');
  
  // Simulate model update process
  setTimeout(() => {
    showNotification('Validating model integrity...', 'info');
    
    setTimeout(() => {
      showNotification('Installing new model...', 'info');
      
      setTimeout(() => {
        button.disabled = false;
        button.innerHTML = '<i class="fas fa-sync"></i> Update Model';
        showNotification('ML model updated successfully to PhishGuard v2.4!', 'success');
        
        // Update the model version in the UI
        const modelVersionElement = document.querySelector('.model-details p:first-child');
        if (modelVersionElement) {
          modelVersionElement.innerHTML = '<strong>Current Model:</strong> PhishGuard v2.4';
        }
        
        const lastUpdatedElement = document.querySelector('.model-details p:nth-child(2)');
        if (lastUpdatedElement) {
          lastUpdatedElement.innerHTML = '<strong>Last Updated:</strong> Just now';
        }
      }, 1500);
    }, 1500);
  }, 2000);
}

function showDetectionDetails(url) {
  // In a real implementation, this would open a modal with details
  showNotification(`Loading details for ${url}...`, 'info');
  // Simulate API calls
  setTimeout(() => {
    // This would open a modal in a real implementation
    showNotification('Detail view would open here in a modal window', 'info');
  }, 800);
}

function showNotification(message, type = 'info') {
  const container = document.getElementById('notificationContainer');
  
  const notification = document.createElement('div');
  notification.className = 'notification';
  
  let icon = '';
  switch (type) {
    case 'success':
      icon = '<i class="fas fa-check-circle"></i>';
      break;
    case 'error':
      icon = '<i class="fas fa-exclamation-circle"></i>';
      break;
    default:
      icon = '<i class="fas fa-info-circle"></i>';
  }
  
  notification.innerHTML = `${icon} ${message}`;
  
  container.appendChild(notification);
  
  // Remove notification after 3 seconds
  setTimeout(() => {
    notification.style.opacity = '0';
    notification.style.transform = 'translateX(100%)';
    
    setTimeout(() => {
      container.removeChild(notification);
    }, 300);
  }, 3000);
}

// Export functions for testing and module use
export {
  initializeCharts,
  updateDashboardData,
  exportDetectionData,
  updateMLModel,
  showDetectionDetails,
  showNotification
};
